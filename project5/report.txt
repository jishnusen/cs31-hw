# Obstacles Overcome
The main challenge I had with this project was devising a way to split the words
up during determine score. I ended up writing a substring function to pull and
check words after determining their start/end indices.

# Pseudocode Structure

makeLower():
    for each character in string
        tolower(character)

nonLetter():
    for each character in string
        if not alpha
            return true

lookup():
    for each rule
        if there is a single-word rule with same word_in
            return that rules index
        if there is another rule with same word_in and word_out
            store its index

    no single-word duplicate, so return double word index if found

pushEmpty():
    for each rule
        if word_in is not empty
            swap with the last empty word_in we saw

    return number of non empty word_in swaps we made

cleanUpRules():
    if nRules is negative, cap it to zero
    for each rule pair
        make both word_in and word_out lowercase
        if word_in is same as word_out 
            replace with empty string
        if word_in or word_out contains nonleter chars
            replace with empty string
        if duplicate rules (single-word with same word_in or full duplicate)
            replace with empty string

    push all empty string rules to the end of the rules array
    return array len - empty string rules

determineScore():
    if nRules is negative, cap it to zero
    make empty cstring "doccpy" with max possible document length
    for each character in document
        if alpha or space
            store in doccpy
    null terminate doccpy // Now we have doccpy with only alpha and space chars

    make doccpy lowercase
    match counter = 0

    for each rule
        if single word rule
            if we are at the end of a word
                if this last word matches rule
                    increment match counter
                    go to next rule
        if two word rule
            if we are at the end of a word
                if this last word matches word_in
                    store that word_in match in boolean
                if this last word matches word_out
                    go to next rule, this one failed
            if we lasted this long, and word_in matched
                increment match counter
                go to next rule

    return match counter

# Test cases
cleanUpRules()
---
1. Test single rule with random casing in word_in and no word_out and ensure
normalized to lower case
2. Repeat case 1 with word_out random casing as well, and ensure both are
normalized to lower case

3. Test single rule with no word_in and word_out containing any string and
ensure the rule is "removed"

4. Test single rule with nonalpha symbols in word_in and no word_out and ensure
removed
5. Repeat case 4 with nonalpha symbol in word_out and ensure removed

6. Test single rule with equivalent word_in and word_out and ensure removed

7. Test with new rule array that contains all rules above, as well as some clean
1 word and 2 word rules and ensure it behaves normally

8. Test with one rule having same word_out as word_in of another rule, make sure
its left alone

9. Test with nRules < 0 and nRules == 0 and ensure that function returns 0 as
expected and leaves array untouched

===

determineScore()
---
All tests conducted with rules from test case no. 9 from cleanUpRules test, as
they include both one word and two word rules.

1. Test regular sentence that has matches for all two word rules.

2. Test regular sentence that has matches for all one word rules.

3. Test regular sentence that has matches for some one word, and some two word
rules.

4. Test empty string.

5. Test sentence with random symbols within words.

6. Test sentence with random casing.

7. Test sentence with length == 250.

8. Test sentence with all words longer than rule length.

9. Test with nRules == 0; nRules < 0


